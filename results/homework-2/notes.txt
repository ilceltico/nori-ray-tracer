Temp Notes
=======
Rendering took 3.4-3.8m on M1 Pro all cores with sampleCount=1, 37.8m on one core.
It took 1.8h on M1 Pro all cores with sampleCount=32.

Rendering with sampleCount=1 single-core with M1 Pro with code at commit e59dba59eb480e7d0dc1b507b0ca687ebb76019f:
No Octree: 37.8m (+0s)
Depth 2: 3.4m (+0.0202856s)
Depth 3: 51.6s (+0.0370412s)
Depth 4: 11.8s (+0.0550326s)
Depth 5: 3.9s (+0.0737061s)
Depth 6: 2.5s (+0.0963871s) - BEST
Depth 7: 2.4s (+0.136154s) - BEST
Depth 8: 2.6s (+0.201323s)
Depth 9: 2.8s (+0.352255s)

Rendering with sampleCount=4 single-core with M1 Pro with code at commit e59dba59eb480e7d0dc1b507b0ca687ebb76019f:
Depth 4: 46.4s (+0.0550059s)
Depth 5: 15.7s (+0.0744386s)
Depth 6: 9.7s (+0.0962526s)
Depth 7: 9.3s (+0.132946s) - BEST
Depth 8: 10.1s (+0.201426s)
Depth 9: 11.5s (+0.365454s)

Rendering with sampleCount=4 single-core with M1 Pro with code at commit 0dd6fe5022630bc2c0ce1046630ce84e6d412048 (check BoundingBox before adding node to queue):
Depth 4: 48.1s (+0.0550059s)
Depth 5: 13.3s (+0.0744386s)
Depth 6: 5.3s (+0.0962526s)
Depth 7: 3.5s (+0.132946s) - BEST
Depth 8: 3.3s (+0.201426s) - BEST
Depth 9: 3.5s (+0.365454s)
Depth 10: 3.6s (+0.541182s)

Rendering with sampleCount=4 8-threads with M1 Pro with code at commit e59dba59eb480e7d0dc1b507b0ca687ebb76019f:
Depth 4: 6.5s (+0.0550059s)
Depth 5: 2.1s (+0.0744386s)
Depth 6: 1.3s (+0.0962526s) - BEST
Depth 7: 1.3s (+0.132946s) - BEST
Depth 8: 1.4s (+0.201426s)
Depth 9: 2.1s (+0.365454s)

Rendering with sampleCount=32 8-threads with M1 Pro with code at commit e59dba59eb480e7d0dc1b507b0ca687ebb76019f:
Depth 4: 51.1s (+0.0550059s)
Depth 5: 18.5s (+0.0744386s)
Depth 6: 11.4s (+0.0962526s)
Depth 7: 9.9s (+0.132946s) - BEST
Depth 8: 12.6s (+0.201426s)
Depth 9: 11.5s (+0.365454s)
Depth 10: 11.8s (+0.542932s)
Depth 11: 11.8s (+0.568191s)

Rendering with sampleCount=32 8-threads with M1 Pro with code at commit 0dd6fe5022630bc2c0ce1046630ce84e6d412048 (check BoundingBox before adding node to queue):
Depth 4: 53.9s (+0.0550059s)
Depth 5: 14.5s (+0.0744386s)
Depth 6: 6.6s (+0.0962526s) (19.6MB)
Depth 7: 3.9s (+0.132946s) (23.9MB)
Depth 8: 4.0s (+0.21211s) (27.1MB)
Depth 9: 3.5s (+0.365454s) (44.1MB)
Depth 10: 3.7s (+0.549072s) (71.5MB)
Depth 11: 3.6s (+0.577732s) (75.7MB)
Depth 15: 4.0s (+0.673225s) (99.4MB)
Depth 18: 3.5s (+18.2982s) (4.95GB)

Rendering with sampleCount=32 8-threads with M1 Pro with code at commit 4163c5f369001d2d9fce8b559ed109dafd9bde8a (check BoundingBox before + add BB to OctreeNode):
Depth 6: 4.7s (+0.100353s) (26.7MB)
Depth 7: 2.6s (+0.139652s) (25.3MB)
Depth 8: 2.1s (+0.206515s) (34.8MB)
Depth 9: 2.1s (+0.357736s) (63.9MB)
Depth 10: 2.1s (+0.558796s) (108.2MB)
Depth 11: 2.1s (+0.581417s) (108.8MB)
Depth 15: 2.2s (+0.673703s) (138.6MB)
Depth 18: 2.2s (+19.2447s) (6.77GB)

Rendering with sampleCount=32 8-threads with M1 Pro with code at commit bac7af3c8dd570225da980a4c2e56d2e2f1cae92 (check BoundingBox before + add BB to OctreeNode + recursive tree pruning):
Depth 6: 2.8s
Depth 7: 1.4s
Depth 8: 1.1s
Depth 9: 1.1s
Depth 10: 1.1s
Depth 11: 1.1s
Depth 15: 1.1s
Depth 18: 1.2s

Rendering with sampleCount=32 8-threads with M1 Pro with code at commit (final - serial octree):
Depth 1 (no tree): 1.8h
Depth 2: 15.1m (0.022s)
Depth 3: 3.8m (0.039s)
Depth 4: 41.2s (0.060s)
Depth 5: 9.4s (0.079s)
Depth 6: 3.0s (0.104s)
Depth 7: 1.5s (0.143s)
Depth 8: 1.2s (0.211s)
Depth 9: 1.2s (0.376s)
Depth 10: 1.2s (0.624s)
Depth 11: 1.3s (0.689s)
Depth 15: 1.2s (0.863s)
Depth 18: 1.3s (34.4s)

Same but without storing BB in nodes:
Depth 6: 3.0s
Depth 7: 1.7s
Depth 8: 1.5s
Depth 9: 1.5s
Depth 10: 1.5s
Depth 11: 1.5s
Depth 15: 1.6s
Depth 18: 1.5s


Vector better than list in Octree construction, around 2-3x faster.

Made a generic version for containers, abandoned due to Clang problems. Could have worked with iterators too but I wanted to keep the container in the Leaf without storing extra pointers + I'm using only vectors anyway, as they proved faster than lists.
